* File Header
#+BEGIN_SRC emacs-lisp :padline no
  ;;; init-ext.el -- Automatically generated initialization file
  ;;;
  ;;; This file is generated from the init-ext.org file, so no edits
  ;;; should be made to this file directly.
  ;;;
  ;;; Commentary:
  ;;;
  ;;; See init-ext.org for complete documentation.
  ;;;
  ;;; Code:
  ;;;

#+END_SRC


#+begin_src emacs-lisp
  (defun got/insert-cask-package-list ()
	"Insert a sorted list of depends clauses for all installed packages.
	 This is suitable for populating the body of a Cask file."
	(interactive)
	(dolist (pkg
			 (sort
			  (mapcar
			   (lambda (pkg-desc)
				 (car pkg-desc))
			   package-alist) 'string-lessp))
	  (insert (format "(depends-on \"%s\")" pkg))
	  (newline)))
#+end_src


The table that follows this code block documents all of the packages
that I am currently using.  To update the list, just move the point
to anywhere inside the code block and type ~C-c C-c~ and answer "yes"
to the prompt.


#+BEGIN_SRC emacs-lisp :tangle no
  (defun got/gen-package-table ()
    "Generate a table of all installed packages, along with their descriptions"
    (cons '("_Package Name_" "_Package Description_")
    (sort
     (mapcar
      (lambda (pkg-desc)
        (list (car pkg-desc) (package-desc-summary (cadr pkg-desc))))
      package-alist)
     `(lambda (a b) (string-lessp (car a) (car b))))))

  (got/gen-package-table)
#+END_SRC

#+RESULTS:
| _Package Name_                  | _Package Description_                                                              |
| a                               | Associative data structure functions                                               |
| ac-geiser                       | Auto-complete backend for geiser                                                   |
| ac-slime                        | An auto-complete source using slime completions                                    |
| adoc-mode                       | a major-mode for editing AsciiDoc files in Emacs                                   |
| alert                           | Growl-style notification system for Emacs                                          |
| ansi                            | Turn string into ansi strings                                                      |
| async                           | Asynchronous processing in Emacs                                                   |
| auto-compile                    | automatically compile Emacs Lisp libraries                                         |
| auto-complete                   | Auto Completion for GNU Emacs                                                      |
| bind-key                        | A simple way to manage personal keybindings                                        |
| cask                            | Cask: Project management for package development                                   |
| cider                           | Clojure Interactive Development Environment that Rocks                             |
| circe                           | Client for IRC in Emacs                                                            |
| clojure-mode                    | Major mode for Clojure code                                                        |
| clojure-mode-extra-font-locking | Extra font-locking for Clojure mode                                                |
| clojure-snippets                | Yasnippets for clojure                                                             |
| color-theme-sanityinc-tomorrow  | A version of Chris Kempson's "tomorrow" themes                                     |
| company                         | Modular text completion framework                                                  |
| concurrent                      | Concurrent utility functions for emacs lisp                                        |
| ctable                          | Table component for Emacs Lisp                                                     |
| dash                            | A modern list library for Emacs                                                    |
| deferred                        | Simple asynchronous functions for emacs lisp                                       |
| diminish                        | Diminished modes are minor modes with no modeline display                          |
| docker                          | Emacs interface to Docker                                                          |
| docker-api                      | Emacs interface to the Docker API                                                  |
| docker-compose-mode             | Major mode for editing docker-compose files                                        |
| docker-tramp                    | TRAMP integration for docker containers                                            |
| dockerfile-mode                 | Major mode for editing Docker's Dockerfiles                                        |
| drag-stuff                      | Drag stuff (lines, words, region, etc...) around                                   |
| edit-server                     | server that responds to edit requests from Chrome                                  |
| epc                             | A RPC stack for the Emacs Lisp                                                     |
| epl                             | Emacs Package Library                                                              |
| erlang                          | Erlang major mode                                                                  |
| exec-path-from-shell            | Get environment variables such as $PATH from the shell                             |
| expand-region                   | Increase selected region by semantic units.                                        |
| f                               | Modern API for working with files and directories                                  |
| fakir                           | fakeing bits of Emacs                                                              |
| flx                             | fuzzy matching with good sorting                                                   |
| flx-ido                         | flx integration for ido                                                            |
| flycheck                        | On-the-fly syntax checking                                                         |
| flycheck-cask                   | Cask support in Flycheck                                                           |
| flycheck-clojure                | Flycheck: Clojure support                                                          |
| flycheck-pos-tip                | Display Flycheck errors in GUI tooltips                                            |
| flymake-easy                    | Helpers for easily building flymake checkers                                       |
| fsm                             | state machine library                                                              |
| geiser                          | GNU Emacs and Scheme talk to each other                                            |
| ghub                            | Minuscule client libraries for Git forge APIs.                                     |
| git-commit                      | Edit Git commit messages.                                                          |
| gmail-message-mode              | A major-mode for editing gmail messages using markdown syntax.                     |
| gntp                            | Growl Notification Protocol for Emacs                                              |
| go-complete                     | Native code completion for Go                                                      |
| go-mode                         | Major mode for the Go programming language                                         |
| graphql                         | GraphQL utilities                                                                  |
| graphviz-dot-mode               | Mode for the dot-language used by graphviz (att).                                  |
| guru-mode                       | Become an Emacs guru                                                               |
| ham-mode                        | Html As Markdown. Transparently edit an html file using markdown                   |
| haskell-mode                    | A Haskell editing mode                                                             |
| helm                            | Helm is an Emacs incremental and narrowing framework                               |
| helm-core                       | Development files for Helm                                                         |
| ht                              | The missing hash table library for Emacs                                           |
| html-to-markdown                | HTML to Markdown converter written in Emacs-lisp.                                  |
| htmlize                         | Convert buffer text and decorations to HTML.                                       |
| hydra                           | Make bindings that stick around.                                                   |
| idle-highlight-mode             | Highlight the word the point is on                                                 |
| ido-completing-read+            | A completing-read-function using ido                                               |
| ido-vertical-mode               | Makes ido-mode display vertically                                                  |
| jabber                          | A Jabber client for Emacs.                                                         |
| jedi                            | a Python auto-completion for Emacs                                                 |
| jedi-core                       | Common code of jedi.el and company-jedi.el                                         |
| jira-markup-mode                | Emacs Major mode for JIRA-markup-formatted text files                              |
| json-mode                       | Major mode for editing JSON files.                                                 |
| json-reformat                   | Reformatting tool for JSON                                                         |
| json-snatcher                   | Grabs the path to JSON values in a JSON file                                       |
| kv                              | key/value data structure functions                                                 |
| log4e                           | provide logging framework for elisp                                                |
| lv                              | Other echo area                                                                    |
| macrostep                       | interactive macro expander                                                         |
| magit                           | A Git porcelain inside Emacs.                                                      |
| magit-popup                     | Define prefix-infix-suffix command combos                                          |
| magit-section                   | Sections for read-only buffers                                                     |
| markdown-mode                   | Major mode for Markdown-formatted text                                             |
| markup-faces                    | collection of faces for markup language modes                                      |
| memoize                         | Memoization functions                                                              |
| multiple-cursors                | Multiple cursors for Emacs.                                                        |
| noflet                          | locally override functions                                                         |
| nyan-mode                       | Nyan Cat shows position in current buffer in mode-line.                            |
| oauth2                          | OAuth 2.0 Authorization Protocol                                                   |
| org                             | Outline-based notes management and organizer                                       |
| org-drill                       | Self-testing using spaced repetition                                               |
| org-plus-contrib                | Outline-based notes management and organizer                                       |
| ox-jira                         | JIRA Backend for Org Export Engine                                                 |
| ox-json                         | JSON export backend for Org mode                                                   |
| p4                              | Simple Perforce-Emacs Integration                                                  |
| package-build                   | Tools for assembling a package archive                                             |
| packed                          | package manager agnostic Emacs Lisp package utilities                              |
| pallet                          | A package management tool for Emacs, using Cask.                                   |
| paradox                         | A modern Packages Menu. Colored, with package ratings, and customizable.           |
| parseclj                        | Clojure/EDN parser                                                                 |
| parseedn                        | Clojure/EDN parser                                                                 |
| persist                         | Persist Variables between Emacs Sessions                                           |
| pkg-info                        | Information about packages                                                         |
| popup                           | Visual Popup User Interface                                                        |
| popwin                          | Popup Window Manager                                                               |
| pos-tip                         | Show tooltip at point                                                              |
| prodigy                         | Manage external services from within Emacs                                         |
| projectile                      | Manage and navigate projects in Emacs easily                                       |
| python-environment              | virtualenv API for Emacs Lisp                                                      |
| queue                           | Queue data structure                                                               |
| racket-mode                     | Racket editing, REPL, and more                                                     |
| react-snippets                  | Yasnippets for React                                                               |
| request                         | Compatible layer for URL request                                                   |
| request-deferred                | Wrap request.el by deferred                                                        |
| restclient                      | An interactive HTTP client for Emacs                                               |
| s                               | The long lost Emacs string manipulation library.                                   |
| seq                             | Sequence manipulation functions                                                    |
| sesman                          | Generic Session Manager                                                            |
| shen-elisp                      | Shen implementation in Elisp                                                       |
| shen-mode                       | Utilities for working with Shen code.                                              |
| shut-up                         | Shut up would you!                                                                 |
| slime                           | Superior Lisp Interaction Mode for Emacs                                           |
| smartparens                     | Automatic insertion, wrapping and paredit-like navigation with user defined pairs. |
| smex                            | M-x interface with Ido-style fuzzy matching.                                       |
| spinner                         | Add spinners and progress-bars to the mode-line for ongoing operations             |
| srv                             | perform SRV DNS requests                                                           |
| tablist                         | Extended tabulated-list-mode                                                       |
| transient                       | Transient commands                                                                 |
| treepy                          | Generic tree traversal tools                                                       |
| twittering-mode                 | Major mode for Twitter                                                             |
| undo-tree                       | Treat undo history as a tree                                                       |
| use-package                     | A configuration macro for simplifying your .emacs                                  |
| web                             | useful HTTP client                                                                 |
| web-mode                        | major mode for editing web templates                                               |
| websocket                       | Emacs WebSocket client and server                                                  |
| which-key                       | Display available keybindings in popup                                             |
| with-editor                     | Use the Emacsclient as $EDITOR                                                     |
| yaml-mode                       | Major mode for editing YAML files                                                  |
| yasnippet                       | Yet another snippet extension for Emacs                                            |
| yasnippet-snippets              | Collection of yasnippet snippets                                                   |

* Utility Functions
** got/convert

#+BEGIN_SRC emacs-lisp
  (defun got/convert (from to)
    "This function is a wrapper around two calc functions:
      calcFunc-uconv
      calc-eval
     It converts the units used in `FROM` to the units in `TO`

     See the documentation for the `math-standard-units` variable
     for a complete list of all of the units that calc understands."

    (calcFunc-uconv (calc-eval from 'raw) to))
#+END_SRC
** got/load-file-base-name

#+BEGIN_SRC emacs-lisp
  (defun got/load-file-base-name (directory base-name)
    "Look for files located in DIRECTORY whose base name is BASE-NAME.

  If BASE-NAME.org exists, load it via org-babel-laod-file
  Else if BASE-NAME.el exists, load it via load"
    (let ((org-file (expand-file-name (concat base-name ".org") directory))
          (lisp-file (expand-file-name  (concat base-name ".el") directory)))
      (cond
       ((file-exists-p org-file) (org-babel-load-file org-file))
       ((file-exists-p lisp-file) (load lisp-file)))))

#+END_SRC

** got/minutes-to-hms-string

#+BEGIN_SRC emacs-lisp
  (defun got/minutes-to-hms-string (minutes)
    "Convert a floating-point MINUTES to a string of the form
  \"hh:mm:ss\""
    (let* ((whole-minutes (floor minutes))
           (h (/ whole-minutes 60))
           (m (- whole-minutes (* h 60)))
           (s (* (- minutes whole-minutes) 60)))
      (format "%02d:%02d:%02d" h m s)))

#+END_SRC

** got/with-current-directory

#+BEGIN_SRC emacs-lisp
  (defmacro got/with-current-directory (&rest body)
    "Macro to save Emacs current working directory and evaluate the body
     form. The current directory is restored after the body form is
     evaluated."
    `(let ((cur-dir default-directory))
       ,@body
       (cd cur-dir)))

#+END_SRC

** got/send-region-to-jrnl

Got the idea from [[http://ericjmritz.name/2014/06/30/send-emacs-buffer-to-jrnl/][here]].

#+BEGIN_SRC emacs-lisp
  (defun got/send-region-to-jrnl (start end)
    "Send contents of region delineated by START and END to jrnl."
    (interactive "r")
    (call-process-region start end "jrnl"))
#+END_SRC

** got/sort-words

This is a handy function that let's you select some words, separated
by whitespace, and sort them in place.

#+BEGIN_SRC emacs-lisp
(defun got/sort-words (start end)
  "Sort the words in the region (presumed to be on one line).
Assumes they are separated by a single space."
  (interactive "r")
  (let* ((input (sort (split-string (buffer-substring start end)) #'string-lessp))
        (output (mapconcat #'identity input " ")))
    (delete-region start end)
    (insert output)))
#+END_SRC

** jme buffer cleanup

Got this from [[https://github.com/jeastman/emacs.d/blob/master/init-ext.org][John's Emacs config]].

#+BEGIN_SRC emacs-lisp
  (defun jme/cleanup-buffer-safe ()
    "Perform a bunch of safe operations on the whitespace content of a buffer.
  Does not indent buffer, because it is used for a `before-save-hook', and that
  might be bad."
    (interactive)
    (message "running cleanup")
    (untabify (point-min) (point-max))
    (delete-trailing-whitespace)
    (set-buffer-file-coding-system 'utf-8))
#+END_SRC

** jme toggle window split

Got this from [[https://github.com/jeastman/emacs.d/blob/master/init-ext.org][John's Emacs config]].

#+BEGIN_SRC emacs-lisp
(defun jme/toggle-window-split ()
 "Toggle between horizontal and vertical layout of windows."
  (interactive)
  (if (= (count-windows) 2)
      (let* ((this-win-buffer (window-buffer))
             (next-win-buffer (window-buffer (next-window)))
             (this-win-edges (window-edges (selected-window)))
             (next-win-edges (window-edges (next-window)))
             (this-win-2nd (not (and (<= (car this-win-edges)
                                         (car next-win-edges))
                                     (<= (cadr this-win-edges)
                                         (cadr next-win-edges)))))
             (splitter
              (if (= (car this-win-edges)
                     (car (window-edges (next-window))))
                  'split-window-horizontally
                'split-window-vertically)))
        (delete-other-windows)
        (let ((first-win (selected-window)))
          (funcall splitter)
          (if this-win-2nd (other-window 1))
          (set-window-buffer (selected-window) this-win-buffer)
          (set-window-buffer (next-window) next-win-buffer)
          (select-window first-win)
          (if this-win-2nd (other-window 1))))))
#+END_SRC

** uconv

This is a great formula for working with spreadsheets.

#+BEGIN_SRC emacs-lisp
  (defmath uconv (expression new-units)
    "Perform unit conversion on a calc expression.

Example (calling from elisp - note having to prepend  'calcFunc-'
to the function name):

    (calcFunc-uconv (calc-eval \"5.38 mi + 2500 m\" 'raw) \"mi\")

    or

    (calcFunc-uconv (calc-eval \"44 degF\" 'raw) \"degC\")


Here is a more complicated example that sums a column of distances and converts
the result to use miles (formatted to 2 decimal places):

    '(calcFunc-uconv (calc-eval (mapconcat 'identity (list @III..@IIII) \" + \") 'raw) \"mi\");%.2f mi

"
    (calc-eval
     (math-convert-units
      (calc-eval expression 'raw)
      (calc-eval new-units 'raw))))
#+END_SRC

* Load Private settings

These are things like email settings, etc.  I keep them in a file in my
~emacs.d~ directory called ~.private.el~ and I do /not/ save this file in git.

#+BEGIN_SRC emacs-lisp
(setq got/private-settings
      (expand-file-name ".private.el" got/dotfiles-dir))
(when (file-exists-p got/private-settings)
  (load-file got/private-settings))
#+END_SRC

* Load OS-specific Settings File

Path names, etc., will tend to vary from one operating system to
another.  Here we use the =system-type= variable to look for
initialization files named /<system-type>.org/ or /<system-type.el>/
and load them.

Note that on some systems there may be a ~/~ character in the value of
=system-type=; e.g., on Ubuntu the value is ~gnu/linux~, so we convert ~/~ to ~-~
and the file that we look for would be ~gnu-linux.org~ or ~gnu-linux.el~.

#+BEGIN_SRC emacs-lisp
  (let* ((system-name (symbol-name system-type))
         (base-name (replace-regexp-in-string "/" "-" system-name)))
    (got/load-file-base-name got/dotfiles-dir base-name))

#+END_SRC

* Library Paths

All configuration is stored under =got/dotfiles-dir= (=~/.emacs.d=).
Meta-information files (backups, etc.) are stored in =got/metafiles-dir=.

#+BEGIN_SRC emacs-lisp
(setq got/metafiles-dir "~/.emacs-meta")
(unless (file-exists-p got/metafiles-dir)
       (make-directory got/metafiles-dir))
#+END_SRC
* Load Hostname-specific Settings File

This is yet another more specify place where settings can
go. Here we look for files named <hostname>.org, or <hostname>.el
and load them.

*Note:* With some kind of change in Yosemite, I was getting strange
hostname values; e.g. =gordy30-7....= instead of =gordy30...=.  So I
have updated the regular expression used to generate the /base/
hostname.


#+BEGIN_SRC emacs-lisp
  (let ((host-name-base (car (split-string (system-name) "[-\\.]"))))
    (got/load-file-base-name got/dotfiles-dir host-name-base))
#+END_SRC

* Custom Settings File

Here I am specifying an alternate location for any custom settings.  This
helps keep my ~init.el~ file cleaner.

#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "custom.el" got/metafiles-dir))
#+END_SRC

* Additional Paths

Add all top-level directories in =got/dotfiles-dir= to the load path.

#+BEGIN_SRC emacs-lisp
  (let ((default-directory user-emacs-directory))
    (normal-top-level-add-subdirs-to-load-path))
#+END_SRC

* Meta-Information

These variables are used to configure where other services store various files that
they create.

| Variable Name             | Description                                      |
|---------------------------+--------------------------------------------------|
| got/meta-backup           | Location for backup files                        |
| got/auto-save-prefix      | Location for autosave files                      |
| got/themes-dir            | Location for my custom themes                    |
| got/meta-ido              | file where id state is saved between invocations |
| got/ac-comphist-file      | path to the auto complete history file           |
| got/meta-recent           | where to store list of recently visited files    |
| got/jabber-history        | Where jabber stores its message history          |
| got/jabber-avatar-cache   | where jabber caches its avatar images            |
| got/mc-list-file          | where multiple-cursors tracks preferences        |
| got/bookmark-default-file | where Emacs Booksmarks are stored                |
| got/eshell-directory-name | Where eshell stores control files                |



#+BEGIN_SRC emacs-lisp
  (defvar got/meta-backup
    (expand-file-name "backups" got/metafiles-dir)
    "Location of backup files")
  (defvar got/auto-save-prefix
    (expand-file-name "autosaves/saves-" got/metafiles-dir)
    "Locations of autosave files")
  (defvar got/themes-dir
    (expand-file-name "themes" got/dotfiles-dir)
    "Location for my custom themes")
  (defvar got/vendor-dir
    (expand-file-name "vendor" got/dotfiles-dir)
    "Location for elisp code that is not from the repos")
  (defvar got/meta-ido
    (expand-file-name "ido.last" got/metafiles-dir)
    "file where id state is saved between invocations")
  (defvar got/meta-recent
    (expand-file-name "recent" got/metafiles-dir)
    "where to store list of recently visited files")
  (defvar got/jabber-history
    (expand-file-name "jabber-history" got/metafiles-dir)
    "where jabber should store its history files")
  (defvar got/jabber-avatar-cache
    (expand-file-name "jabber-avatar-cache" got/metafiles-dir)
    "where jabber should store its avatar cache files")
  (defvar got/mc-list-file
    (expand-file-name "mc-lists.el" got/metafiles-dir)
    "where multiple-cursors tracks preferences")
  (defvar got/bookmark-default-file
    (expand-file-name "bookmarks" got/metafiles-dir)
    "where Emacs stores its bookmarks file")
  (defvar got/eshell-directory-name
    (expand-file-name "eshell/" got/metafiles-dir)
    "where Emacs stores its bookmarks file")

#+END_SRC

* General Emacs Configuration
** Bind-Key
Require ~bind-key~ early so we can use it when configuring
other packages.

#+BEGIN_SRC emacs-lisp
(require 'bind-key)
#+END_SRC
** Alarm Bell

The bell rings whenever (ding) is called.  Here we make if flash the frame
rather than make a sound (which I find annoying).

#+BEGIN_SRC emacs-lisp
(setq visible-bell t)
#+END_SRC

** Autocompile

#+BEGIN_SRC emacs-lisp
(when (require 'auto-compile nil 'noerror)
    (auto-compile-on-load-mode))


#+END_SRC

** Automatic indentation

Using ~C-j~ instead of ~RET~ normally runs the =newline-and-indent=
function.  Since this is so handy I remap ~RET~ to do this.

#+BEGIN_SRC emacs-lisp
(bind-key "RET" 'newline-and-indent)
#+END_SRC

** Autorevert mode

Automatically revert buffers when they change on disk.

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode)
#+END_SRC

** Autosave Files

Configure the behaviour of Emacs auto-save.  Here we tell Emacs
where to put the autosave files.

#+BEGIN_SRC emacs-lisp
 (setq auto-save-list-file-prefix got/auto-save-prefix)
#+END_SRC

** Backup Files

Configure the behaviour of Emacs file backups.

#+BEGIN_SRC emacs-lisp
  (unless (file-exists-p got/meta-backup)
    (make-directory got/meta-backup t))
  (setq backup-directory-alist `(("." . ,got/meta-backup)))
  (setq make-backup-files t           ; make backup of a file the first time it is saved
        backup-by-copying t           ; always use copying to create backup files
        version-control t             ; make numeric backups unconditionally
        delete-old-versions t         ; delete excess backup versions silently
        delete-by-moving-to-trash nil ; delete excess backup versions directly
        kept-old-versions 2           ; number of oldest versions to keep when new numbered backup made
        kept-new-versions 4           ; number of newest verions to keep when new numbered backup made
        auto-save-default t           ; do auto-saving of every file-visiting buffer
        auto-save-timeout 30          ; number of seconds idle time before auto-save
        auto-save-interval 300        ; number of input events between auto-saves
  )
#+END_SRC

** Bookmarks

Customize where Emacs stores its bookmarks file

#+BEGIN_SRC emacs-lisp
  (setq bookmark-default-file got/bookmark-default-file)
#+END_SRC

** Company Mode

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'company)
    (global-company-mode))
#+END_SRC

Remove company-mode from the mode line.

#+BEGIN_SRC emacs-lisp
  (eval-after-load "company" '(diminish 'company-mode))
#+END_SRC

** Dired+

Configure ~dired+~ to reuse the directory buffer when navigating about
rather than creating a new buffer for every new directory that is
visited.

#+BEGIN_SRC emacs-lisp
(when (require 'dired+ nil :no-error)
  (diredp-toggle-find-file-reuse-dir 1))
#+END_SRC

** Docker

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'docker)
	(require 'docker))
#+END_SRC
** Ediff

You can invoke /ediff/ from within /magit/ by typing ~e~ with the
point on any file in the list of changes.  By default it positions the
two ediff windows on top of each other.  I prefer them to be
side-by-side.

#+BEGIN_SRC emacs-lisp
  (setq ediff-split-window-function 'split-window-horizontally)
#+END_SRC

** eshell

Override the default location for /eshell/ control files.

#+BEGIN_SRC emacs-lisp
  (setq eshell-directory-name got/eshell-directory-name)
#+END_SRC

Have /eshell/ use the same history size as my /HISTSIZE/ environment
variable.

#+BEGIN_SRC emacs-lisp
  (setq eshell-history-size nil)
#+END_SRC

** expand-regiocn

Create ~C-=~ keybinding to invoce the =er/expand-region=
function. This increases selected region by semantic units.

With prefix argument expands the region that many times.
If prefix argument is negative calls `er/contract-region'.
If prefix argument is 0 it resets point and mark to their state
before calling `er/expand-region' for the first time.

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'expand-region)
      (bind-key "C-=" 'er/expand-region))
#+END_SRC

** TODO install/configure git-gutter-fringe
** TODO install git-messenger
** Guru Mode

Enable =guru-mode= everywhere.

#+BEGIN_SRC emacs-lisp
  (guru-global-mode t)
#+END_SRC

Remove guru-mode from the mode line

#+BEGIN_SRC emacs-lisp
  (eval-after-load "guru-mode" '(diminish 'guru-mode))
#+END_SRC

** Helm

Basic helm configuration from [[http://tuhdo.github.io/helm-intro.html][here.]]

#+BEGIN_SRC emacs-lisp
  (when (and (require 'helm nil :noerror)
             (require 'helm-config nil :noerror))
    ;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
    ;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
    ;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
    (global-set-key (kbd "C-c h") 'helm-command-prefix)
    (global-unset-key (kbd "C-x c"))
    (global-set-key (kbd "M-x") 'helm-M-x)

    (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
    (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
    (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z

    (when (executable-find "curl")
      (setq helm-google-suggest-use-curl-p t))

    (setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
          helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
          helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
          helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
          helm-ff-file-name-history-use-recentf t ; use recentf-list in helm-find-files
          helm-M-x-fuzzy-match t)                 ; fuzzy matching for helm-M-x

    (helm-mode 1))
#+END_SRC

Remove helm-mode from mode line.

#+BEGIN_SRC emacs-lisp
  (eval-after-load "helm" '(diminish 'helm-mode))
#+END_SRC

** Jabber

*** fsm-debug

Jabber enables =fsm-debug= by default.  This should be disabled.

#+BEGIN_SRC emacs-lisp
(setq fsm-debug nil)
#+END_SRC

*** OS-Specific Configuration Notes

I store my jabber configuration in my ~.private.el~ file.  Here is a
sample bit of config.  Notice the =--no-ca-verification= argument.
I am including it just as a way to demonstrate how to handle
configuration for a jabber server that may be using a self-signed
certificate, or a signed certificate that ~gnutls-cli~ doesn't know
about.


#+BEGIN_SRC emacs-lisp :tangle no
(when (package-installed-p 'jabber)
  (setq starttls-use-gnutls t
        starttls-gnutls-program "gnutls-cli"
        starttls-extra-arguments '("--starttls" "--insecure" "--no-ca-verification"))

  (setq jabber-account-list
        '(("<my-account-name>@<jabber-server-address>"
           (:network-server . "<jabber-server-address>")
           (:password . "<my-account-password>")
           (:connection-type . ssl)))))
#+END_SRC

*** Miscellaneous Commands

A couple of useful jabber commands:

- =M-x jabber-connect-all= will connect you to all jabber accounts in
  your =jabber-account-list=.
- =M-x jabber-vcard-edit= will pull down your vcard entry from the
  jabber server and let you edit your information.  From here you can
  also attach a photo of yourself.  There is an 8K file size limit if
  you use this interface.  You /can/ get around this rather easily.
  Before executing the =jabber-vcard-edit= command, just open the file
  ~jabber-vcard.el~, goto the function =jabber-vcard-reassemble=, bump
  up the value used for size comparison (8192) to something bigger,
  and evaluate the function.  After uploading your vcard changes you
  can return the value back to 8192.
- =M-x jabber-groupchat-join= is used to join in with a particular
  discussion group.  If you want to have that happen automatically
  when you connect to a particular jabber server, take a look at the
  next command.
- =M-x jabber-edit-bookmarks= will pull down your current bookmarks on
  a given jabber server.  You can add a bookmark for a particular
  groupchat and check the box to automatically connect to it when
  log-in to that jabber server.

*** Jabber Avatar Cache Settings

Jabber will cache avatar image files.  This controls where those are
stored.

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'jabber)
    (setq jabber-avatar-cache-directory got/jabber-avatar-cache))
#+END_SRC

*** Jabber History

The following configures Jabber message history.

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'jabber)
    (unless (file-exists-p got/jabber-history)
      (make-directory got/jabber-history))
    (setq jabber-history-enabled t                 ; enable private history
          jabber-history-muc-enabled t             ; enable MUC history
          jabber-history-dir got/jabber-history    ; located here
          jabber-history-size-limit 1024           ; when files get this big
          jabber-history-enable-rotation t         ; then rotate them
          jabber-use-global-history nil)           ; disable global history file
    (custom-set-variables '(jabber-show-resources nil)))


#+END_SRC

*** Jabber Alerts

From [[http://www.emacswiki.org/emacs/JabberEl#toc15][here]]:

#+BEGIN_SRC emacs-lisp
  (when (require 'jabber nil :noerror)
    (define-jabber-alert echo "Show a message in the echo area"
      (lambda (msg)
        (unless (minibuffer-prompt)
          (message "%s" msg)))))
#+END_SRC

That fix keeps your entry in the echo area from getting clobbered.

*** Jabber Notifications

See the file ~darwin.org~ for some notifications customization.
Here we enable custom notifications, if available.

#+BEGIN_SRC emacs-lisp
  (when (fboundp 'got/message-notify)
    ;; This handles private chat buffers
    (add-hook 'jabber-alert-message-hooks (lambda (from buffer text title)
                                            (got/message-notify title text)))
    ;; This handles multi-user chat buffers
    (add-hook 'jabber-muc-hooks (lambda (nick group buffer text title)
                                  (got/message-notify title text))))
#+END_SRC

*** Jabber Reconnecting

The following instructs jabber to reconnect automatically when you
network configuration changes.

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'jabber)
    (setq jabber-auto-reconnect t))

#+END_SRC

*** Disable undo in roster

#+BEGIN_SRC emacs-lisp
  (defun got/jabber-roster-setup()
    (buffer-disable-undo (get-buffer "*jabber-roster*")))

  (when (require 'jabber nil :noerror)
    (add-hook 'jabber-roster-mode-hook 'got/jabber-roster-setup))
#+END_SRC

*** Disable Anonymous Authentication

From [[http://www.warmenhoven.org/src/emacs.el/ew-jabber.el.html][this page]]:

#+BEGIN_SRC emacs-lisp
  (defadvice jabber-xml-get-children (after eaw-remove-anonymous)
    (setq ad-return-value (remove '(mechanism nil "ANONYMOUS") ad-return-value)))
  (ad-activate 'jabber-xml-get-children)
#+END_SRC

** [[https://github.com/magnars/multiple-cursors.el][multiple-cursors]]

To get out of multiple-cursors-mode, press ~RET~ or ~C-g~. The latter
will first disable multiple regions before disabling multiple
cursors. If you want to insert a newline in multiple-cursors-mode, use
~C-j~.

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'multiple-cursors)
    ;; with active region spanning multiple lines, the following will add a cursor to each line
    (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
    ;; add multiple cursors based on keywords in the buffer, first mark the word then
    ;; add more cursors
    (global-set-key (kbd "C->") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this))
#+END_SRC

The following controls where ~multiple-cursors~ stores preferences
that the user has set for running commands with multiple cursors.

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'multiple-cursors)
    (setq mc/list-file got/mc-list-file))
#+END_SRC

** mwim

[[https://github.com/alezost/mwim.el][mwim]] provides command for moving to the beginning or end of a line in
an intelligent fashion.

#+BEGIN_SRC emacs-lisp
  (when (require 'mwim nil 'noerror)
    (bind-key "C-a" 'mwim-beginning-of-code-or-line)
    (bind-key "C-e" 'mwim-end-of-code-or-line))
#+END_SRC

** newlines

Add a newline to the end of a file on save.

#+BEGIN_SRC
(setq require-final-newline t)
#+END_SRC

** Open With External Program

#+BEGIN_SRC emacs-lisp
  (defun got/open-with-external-program ()
    "Open the current buffer (must be visting a file) with
     whatever external program is registered to work with it."
    (interactive)
    (shell-command (concat "open \"" buffer-file-name "\"")))

  (bind-key "C-c C-g o" 'got/open-with-external-program)
#+END_SRC

** Server For Client Processes

Allow Emacs to be a server for client processes.

#+BEGIN_SRC emacs-lisp
(server-start)
#+END_SRC

** show-paren-mode

Enable matching of parenthesis globally.

#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
#+END_SRC

** System Clipboard Integration

Save the clipboard strings into the kill ring before replacing them.


#+BEGIN_SRC emacs-lisp
(setq save-interprogram-paste-before-kill t)
#+END_SRC

** tab width

Set the default tab with to 4 spaces.

#+BEGIN_SRC emacs-lisp
(setq-default tab-width 4)
#+END_SRC

** tangle buffer

Quick way to tell org to tangle the current buffer.

#+BEGIN_SRC emacs-lisp
(bind-key "C-c C-g t"
          '(lambda ()
             "Tangle the current buffer"
             (interactive)
             (org-babel-tangle-file buffer-file-name)))
#+END_SRC

** Toolbar

Hide the toolbar when running in a window-system on a mac or x.  Otherwise enable it.

#+BEGIN_SRC emacs-lisp
  (if (member window-system '(x mac))
    (tool-bar-mode -1)
    (tool-bar-mode 1))
#+END_SRC

** Tramp

Set the default connection method used by tramp.

#+BEGIN_SRC emacs-lisp
  (setq tramp-default-method "sshx")
#+END_SRC
** truncate lines

Respect the value of =truncate-lines= with respect to line truncation.

#+BEGIN_SRC emacs-lisp
(setq truncate-partial-width-windows nil)
#+END_SRC

** Uniquify

The library [[http://www.emacswiki.org/emacs/uniquify][uniquify]] overrides Emacs’ default mechanism for making
buffer names unique (using suffixes like <2>, <3> etc.) with a more
sensible behaviour which use parts of the file names to make the
buffer names distinguishable.


#+BEGIN_SRC emacs-lisp
(when (require 'uniquify nil 'noerror)
  (setq uniquify-buffer-name-style 'forward))
#+END_SRC

** UTF-8 Settings

#+BEGIN_SRC emacs-lisp
(set-terminal-coding-system 'utf-8) ; set terminal output to utf-8
(set-keyboard-coding-system 'utf-8) ; set terminal input to utf-8
(prefer-coding-system 'utf-8)       ; set preferred coding to utf-8
#+END_SRC

** wrap-region

This is a small function that implements a small bit of functionality
that I didn't get from the fantastic /smartparens/ package.  Basically
you mark any region and invoke this function.  It will prompt you to
enter a bit of text and hit RET.  The text you enter will be inserted
around the region.  I have this function bound to =C-c C-g w=.

#+BEGIN_SRC emacs-lisp
(defun got/wrap-region (start end  text)
  "Wrap the region delineated by START and END with TEXT"
  (interactive "r\nstext: ")
  (save-excursion
    (goto-char end)
    (insert text)
    (goto-char start)
    (insert text)))


(bind-key "C-c C-g w" 'got/wrap-region)
#+END_SRC

* Theme Configuration

Make my custom themes directory available to Emacs.

- Do ~M-x customize-themes~ to see a list of all your available themes.
- Do ~M-x load-theme~ to load a new theme.

#+BEGIN_SRC emacs-lisp
(setq custom-theme-directory got/themes-dir)
;; EXAMPLE: Loading a new theme
;; specifying the t option to load-theme prevents being asked about
;; loading an unsafe theme.
(load-theme 'gordy t)
#+END_SRC


Now let's load a new theme I found.

#+BEGIN_SRC emacs-lisp
  (when (require 'color-theme-sanityinc-tomorrow nil :noerror)
    (load-theme 'sanityinc-tomorrow-bright t))
#+END_SRC

Lastly, resize the frame, if applicable.

#+BEGIN_SRC emacs-lisp
  (when (fboundp 'got/resize-frame)
    (got/resize-frame))
#+END_SRC

* Mode-Specific Hooks, Notes, and Configuration
** Asciidoc (adoc) Mode

#+BEGIN_SRC emacs-lisp
  (when (require 'adoc-mode nil 'noerror)
	(add-hook 'adoc-mode-hook 'turn-on-auto-fill)
	(add-to-list 'auto-mode-alist '("\\.adoc\\'" . adoc-mode)))

#+END_SRC

** cider-mode

Really just a few notes here.  If you want to use /cider/ to connect
to a running ~lein repl~ session, you must make sure to update the
~project.clj~ file and add the following:

#+BEGIN_EXAMPLE
:plugins [[cider/cider-nrepl "0.7.0-SNAPSHOT"]]
#+END_EXAMPLE

If you do not you will get the following error:

#+BEGIN_EXAMPLE
Error: (error "Can't find nREPL middleware providing op \"stacktrace\".
Please, install cider-nrepl 0.7.0-snapshot and restart CIDER")
#+END_EXAMPLE

If this does happen, you will want to kill the ~lein repl~ session.
This will allow Emacs to start accepting input again.

If you want to make this available anytime you run ~lein repl~,
whether or not you are in a project, just do the following instead:

- Create a file called ~profiles.clj~ in ~$HOME/.lein~
- Add this line:
  #+BEGIN_EXAMPLE
  {:user {:plugins [[cider/cider-nrepl "0.7.0-SNAPSHOT"]]}}
  #+END_EXAMPLE

*** cider configuration

#+BEGIN_SRC emacs-lisp
  (add-hook 'cider-mode-hook #'eldoc-mode)
#+END_SRC

*** flycheck-mode for Clojure

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'flycheck-clojure)
    (eval-after-load 'flycheck '(flycheck-clojure-setup))
    (add-hook 'clojure-mode-hook 'flycheck-mode))


#+END_SRC

** clojure-mode

#+BEGIN_SRC emacs-lisp
  (add-hook 'clojure-mode-hook
            '(lambda ()
               (add-hook 'before-save-hook 'jme/cleanup-buffer-safe)))
#+END_SRC

** electric-indent-mode

Disable this by default

#+begin_src emacs-lisp
  (electric-indent-mode -1)
#+end_src

** gmail-message-mode

I learned about this mode [[http://endlessparentheses.com/write-gmail-in-emacs-the-easy-way-gmail-message-mode.html?source%3Drss][here.]]  It allows you to compose
browser-based input that accepts HTML using markdown.  Some set-up
notes:

- In Chrome, install the [[http://www.emacswiki.org/emacs/Edit_with_Emacs][Edit with Emacs]] browser extension
- You should also have the [[http://daringfireball.net/projects/markdown/][markdown]] or [[http://johnmacfarlane.net/pandoc/][pandoc]] package installed.  I
  installed markdown via Homebrew.

The following snippet starts the ~edit-server~ so that the browser can
communicate with Emacs.  /Note:/ use ~C-x #~ to complete editing and
send the results back to the browser.

#+BEGIN_SRC emacs-lisp
(when (require 'edit-server nil :noerror)
  (edit-server-start))
#+END_SRC

** go-complete

Enable =go-complete= when opening a Go buffer, if the ~gocode~ binary
is available.

/Note:/ I am using [[https://github.com/mdempsky/gocode][this version]] of code.  To install:

#+BEGIN_SRC sh
  go get -u github.com/mdempsky/gocode
#+END_SRC

You must then copy the file ~go-autocomplete.el~ to a directory in
your Emac's ~load-path~.

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'go-complete)
	(if (= (length (shell-command-to-string "which gocode")) 0)
		(warn "go-complete not enabled for Go code.  Please install gocode if desired.")
	  (progn
		(require 'go-complete)
		(add-hook 'completion-at-point-functions 'go-complete-at-point))))
#+END_SRC

To invoke completion, just do =M-TAB= (or =ESC-TAB=) at point.

** Javascript mode
*** flycheck-mode for Javascript

Enable =flycheck-mode= when opening a Javascript buffer, if flycheck
is available.

/Note:/ For this to work, you should install [[http://www.jshint.com/][jshint]] as follows:

#+BEGIN_SRC sh
  sudo apt install nodejs npm
  sudo npm install -g jshint
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'flycheck)
    (if (= (length (shell-command-to-string "which jshint")) 0)
        (warn "flycheck-mode not enabled for Javascript.  Please install jshint")
      (add-hook 'js-mode-hook 'flycheck-mode)))
#+END_SRC

** lisp-mode

Slime configuration for editing Lisp code.  Tell /slime/ what Lisp to
run.  In this case we are configuring it to use [[http://sbcl.org/][Steel Bank Common Lisp]]
by default.  If you invoke ~M-x slime~ with a prefix argument, you
will get to choose between SBCL and CLISP.

/Note:/  I like to use the version of slime that is installed via
quicklisp.  To install it just do the following from inside a lisp
REPL:

#+BEGIN_EXAMPLE
(ql:quickload "quicklisp-slime-helper")
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
  (let ((slime-software (expand-file-name "quicklisp/dists/quicklisp/software" (getenv "HOME"))))
    (when (file-exists-p slime-software)
      (let ((slime-pkg (car (reverse (directory-files slime-software t "slime-v[0-9]")))))
        (when slime-pkg
          (progn
            (add-to-list 'load-path slime-pkg)
            (require 'slime-autoloads)
            (setq slime-lisp-implementations
                  '((sbcl ("sbcl" "--noinform" "--no-linedit"))
                    (clisp ("clisp" "--quiet"))))
            (setq slime-default-lisp 'sbcl)
            (slime-setup '(slime-fancy slime-asdf)))))))


  (when (package-installed-p 'ac-slime)
    (add-hook 'slime-mode-hook 'set-up-slime-ac)
    (add-hook 'slime-repl-mode-hook 'set-up-slime-ac)
    (eval-after-load "auto-complete"
      '(add-to-list 'ac-modes 'slime-repl-mode)))
#+END_SRC

*** Common Lisp Hyperspec

If we have a local cached copy of the [[http://www.lispworks.com/documentation/HyperSpec/Front/][Common Lisp HyperSpec]], we will
look here for documentation.

#+BEGIN_SRC emacs-lisp
  (when (boundp 'got/common-lisp-hyperspec-root)
    (setq common-lisp-hyperspec-root got/common-lisp-hyperspec-root))

#+END_SRC

** markdown-mode

We want to disable ~auto-fill-mode~ when in ~markdown-mode~.  If not,
then then resulting output (when rendered) is chopped.

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'markdown-mode)
    (add-hook 'markdown-mode-hook
              (lambda () (auto-fill-mode -1))))
#+END_SRC

** monkey-mode

This is courtesy of [[https://github.com/jeastman/emacs.d][jeastman's emacs.d repo]].

#+BEGIN_SRC emacs-lisp
  ;; (when (require 'monkey-mode-line nil 'noerr)
  ;;   (monkeyml/monkey-mode-line))
#+END_SRC

** org-mode
*** inline image handling

Try to get with via examination of #+ATTR.* keyword, if possible, else
fallback to original width.  These two keywords affect it:

- For HTML output: ~#+ATTR_HTML: :width 100~
- For inline previews: ~#+ATTR_ORG: :width 100~

#+BEGIN_SRC emacs-lisp
  (setq org-image-actual-width nil)
#+END_SRC
*** handle x-devonthink-item links

I got this tip from [[https://github.com/jwiegley/dot-emacs/blob/master/lisp/org-devonthink.el][John Wiegley's org-devonthink.el]] file:

#+BEGIN_SRC emacs-lisp
  (org-add-link-type "x-devonthink-item" 'got/org-dtp-open)

  (defun got/org-dtp-open (record-location)
    "Visit the DEVONthink Pro message with the given Message Identifier"
    (shell-command (concat "open x-devonthink-item:" record-location)))
#+END_SRC

*** got/load-link-other-frame

Handy function that will load any kind of hyperlink that org understands
into a brand-new frame.

#+BEGIN_SRC emacs-lisp
(defun got/load-link-other-frame (hyperlink)
  "Load the specified HYPERLINK in frame called hyper-frame.
The function will create it if necessary and will re-use it if it already
exists.

EXAMPLE USAGE:

\(got/load-link-other-frame \"info:eintr#Writing%20Defuns\")"
  (interactive "sHyperlink: ")
  (save-excursion
    (let* ((newframe-name "hyper-frame")
           (newframe (car (filtered-frame-list
                          (lambda (f) (string= newframe-name (frame-parameter f 'name)))))))
      (select-frame
       (if newframe newframe (make-frame (list (cons 'name newframe-name)))))
      (org-open-link-from-string hyperlink))))

#+END_SRC

*** org-mode specific Key bindings

#+BEGIN_SRC emacs-lisp
  (add-hook'org-mode-hook
   (lambda ()
	 (local-set-key (kbd "M-<prior>") 'org-move-subtree-up)
	 (local-set-key (kbd "M-<next>") 'org-move-item-down)))
#+END_SRC
*** org-mode global key bindings

| function         | description                                                               |
| =org-store-link= | save an /org-link/ to the current location.  Insert later with ~C-c C-l~. |
| =org-capture=    | select capture template and insert in target location                     |
| =org-agenda=     | dispatch agenda command                                                   |
| =org-iswitchb=   | switch between org buffers                                                |

#+BEGIN_SRC emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
#+END_SRC

*** org-babel language support.

By default only emacs-lisp is enabled.

#+BEGIN_SRC emacs-lisp

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
	 (python . t)
	 (ditaa . t)
	 (plantuml . t)
	 (clojure . t)
	 (calc . t)
	 (ruby . t)
	 (js . t)
	 (lisp . t)
	 (dot . t)
	 (scheme . t)
	 (shell . t)))


#+END_SRC

*** org-bullet (experimental)

This is some experimental code.

Load my /org-bullet/ stuff if it is available.

#+BEGIN_SRC emacs-lisp
;;;  (let* ((org-bullet-code (concat got/dotfiles-dir "org-bullet.org"))
;;;         (org-bullet-exists (file-exists-p org-bullet-code)))
;;;    (and org-bullet-exists (org-babel-load-file org-bullet-code)))
#+END_SRC

*** org-capture

Define basic /org-capture/ templates.  I currently have just one.

#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
        '(("t" "TODO template" entry
           (file+headline org-default-notes-file "Inbox")
           "** TODO %?\n   CONTEXT: %a\n   OPENED: %U"
           )))
#+END_SRC

*** org-export-backends

Add support for /markdown/  and /jira/ export.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-export-backends 'md)
  (add-to-list 'org-export-backends 'jira)
#+END_SRC

*** org-src-mode settings

This is a minor mode for language major mode buffers generated by org.
This minor mode is turned on in two situations:

- when editing a source code snippet with "C-c '".
- When formatting a source code snippet for export with htmlize.

#+BEGIN_SRC emacs-lisp
  (setq
   org-src-fontify-natively t      ; fontify code in code blocks
   srv-src-tab-acts-natively t     ; effect of TAB in code block as if issued in language major mode buffer
   )
#+END_SRC

*** org-tempo

Restore legacy behavior for inserting code blocks.

#+begin_src emacs-lisp
  (unless (require 'org-tempo nil :no-error)
	(message "org-tempo not available in current version of org-mode"))
#+end_src
*** org TODO States

I am defining my TODO states as follows:

- Active States
  - ~TODO~ Have not started yet
  - ~INPROGRESS~ Working on it
- Completed States
  - ~DONE~ Completed the task
  - ~DELEGATED~ Assigned it to someone else
  - ~CANCELLED~ Decided not to do it after all
  - ~CONTINUED~
	- This is a pseudo-completed state.
	- I am using it to mean that I have started working on this task,
      but have relocated it to another org document and so am tracking
      it from a different location.
	- This is a flag to let me know to go see the task elsewhere.
	- Would be good to add a ~LOCATION~ property that contains a link
      to where I moved the task.


#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords '((sequence "TODO"
									  "INPROGRESS"
									  "CONTINUED"
									  "|"
									  "DONE"
									  "DELEGATED"
									  "CANCELLED"
									  )))
#+END_SRC
*** org-id-locations

Modify the default place where globally-defined ID's are stored.

#+BEGIN_SRC emacs-lisp
  (setq org-id-locations-file
        (expand-file-name "org-id-locations" got/metafiles-dir))

#+END_SRC

*** Configure ispell to skip property and source blocks

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'ispell)
    (add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))
    (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_SRC" . "#\\+END_SRC")))
#+END_SRC

*** clocktable-by-tag

Put the following in your org-mod file...

#+begin_example
#+BEGIN: clocktable-by-tag :tags ("meeting" "development" "support" "maintenance" "request") :maxlevel 3
#+END:
#+end_example

From the following:

- [[https://stackoverflow.com/questions/17353591/timetable-grouped-by-tag][Timetable grouped by tag (stack overflow)]]
- [[https://gist.github.com/ironchicken/6b5424bc2024b3d0a58a8a130f73c2ee][ironchicken/clocktable-by-tag.el]]

I just modified the code to just look at the current (org) buffer
instead of using ~org-agenda-files~.

#+begin_src emacs-lisp
(defun clocktable-by-tag/shift-cell (n)
  (let ((str ""))
    (dotimes (i n)
      (setq str (concat str "| ")))
    str))

(defun clocktable-by-tag/insert-tag (params)
  (let ((tag (plist-get params :tags)))
    (insert "|--\n")
    (insert (format "| %s | *Tag time* |\n" tag))
    (let ((total 0))
      (mapcar
       (lambda (file)
         (let ((clock-data (with-current-buffer (find-file-noselect file)
                             (org-clock-get-table-data (buffer-name) params))))
           (when (> (nth 1 clock-data) 0)
             (setq total (+ total (nth 1 clock-data)))
             (insert (format "| | File *%s* | %.2f |\n"
                             (file-name-nondirectory file)
                             (/ (nth 1 clock-data) 60.0)))
             (dolist (entry (nth 2 clock-data))
               (insert (format "| | . %s%s | %s %.2f |\n"
                               (org-clocktable-indent-string (nth 0 entry))
                               (nth 1 entry)
                               (clocktable-by-tag/shift-cell (nth 0 entry))
                               (/ (nth 4 entry) 60.0)))))))
	   (list (buffer-file-name)))
      (save-excursion
        (re-search-backward "*Tag time*")
        (org-table-next-field)
        (org-table-blank-field)
        (insert (format "*%.2f*" (/ total 60.0)))))
    (org-table-align)))

(defun org-dblock-write:clocktable-by-tag (params)
  (insert "| Tag | Headline | Time (h) |\n")
  (insert "|     |          | <r>  |\n")
  (let ((tags (plist-get params :tags)))
    (mapcar (lambda (tag)
              (clocktable-by-tag/insert-tag (plist-put (plist-put params :match tag) :tags tag)))
            tags)))
#+end_src

** org-drill

#+begin_src emacs-lisp
  (when (require 'org-drill nil 'noerror)
	(setq org-drill-hint-separator "|")
	(setq org-drill-cram-hours 12)  ; this is the default
	(setq org-drill-sm5-initial-interval 1.0)  ; 1 day (for now) default is 4.0
	)
#+end_src

** org-reveal

#+BEGIN_SRC emacs-lisp
;; 2016-11-17 (got) Commenting out due to init error
;;  (when  (require 'ox-reveal nil :no-error)
;;    (setq org-reveal-slide-number nil))

#+END_SRC

** parinfer-mode

This provides a [[http://shaunlebron.github.io/parinfer/index.html][parinfer mode]] for Emacs.  It is not available in the
repos.  I have added it as a git submodule.

#+BEGIN_SRC emacs-lisp
  (let* ((parinfo-dir (expand-file-name "parinfer-mode" got/vendor-dir))
         (parinfo-file (expand-file-name "parinfer-mode.el" parinfo-dir)))
    (when (file-exists-p parinfo-file)
      (got/with-current-directory
       (cd parinfo-dir)
       (load-file parinfo-file))))
#+END_SRC

** python-mode
*** flycheck-mode for python

Enable =flycheck-mode= when opening a Python buffer, if flycheck is available

#+BEGIN_SRC emacs-lisp
;; (when (package-installed-p 'flycheck)
;; (add-hook 'python-mode-hook 'flycheck-mode))
#+END_SRC

*** jedi

[[http://tkf.github.io/emacs-jedi/latest/][jedi]] is a Python auto-completion package for Emacs. It aims at helping
your Python coding in a non-destructive way. It also helps you to find
information about Python objects, such as docstring, function
arguments and code location.

You need to install two Python modules outside of Emacs to make this
work:

- [[http://jedi.jedidjah.ch/en/latest/][Jedi]]
- [[http://python-epc.readthedocs.org/en/latest/][EPC]]

#+BEGIN_SRC sh
sudo pip install jedi
sudo pip install epc
#+END_SRC

Or you may install these packages without root access as follows:

#+BEGIN_SRC sh
pip install --user jedi
pip install --user epc
#+END_SRC

If the /pip/ command is not available you can install it as follows:

- /Ubuntu:/ ~sudo apt-get install python-pip~
- /Mac OS X:/ ~sudo easy_install pip~

#+BEGIN_SRC emacs-lisp
  ;; (when (package-installed-p 'jedi)
  ;;   (setq jedi:setup-keys t)
  ;;   (setq jedi:complete-on-dot t)
  ;;   (add-hook 'python-mode-hook 'jedi:setup))

#+END_SRC

** perl-mode

Set indentation level to match what our company uses.

#+BEGIN_SRC emacs-lisp
  (add-hook 'perl-mode-hook (lambda ()
							  (setq indent-tabs-mode nil)
							  (setq perl-indent-level 3)))

#+END_SRC

Enable flycheck

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'flycheck)
    (add-hook 'perl-mode-hook 'flycheck-mode))

#+END_SRC

** shift-select-mode

When non-nil, shifted motion keys activate the mark momentarily.

While the mark is activated in this way, any shift-translated point
motion key extends the region, and if Transient Mark mode was off, it
is temporarily turned on.  Furthermore, the mark will be deactivated
by any subsequent point motion key that was not shift-translated, or
by any action that normally deactivates the mark in Transient Mark mode.

The following setting disables the use of shift+arrows for mark.

#+BEGIN_SRC emacs-lisp
  (setq shift-select-mode nil)
#+END_SRC
** resentf-mode
   :PROPERTIES:
   :ORDERED:  t
   :END:

Enable ~recentf~ mode which will save a list of recent files visited.

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'recentf)
    (setq recentf-save-file got/meta-recent    ; where to store the file
          recentf-max-saved-items 100          ; save 100 most recent files visited
          recentf-max-menu-items 15            ; max 15 items in the menu
          recentf-auto-cleanup 'never          ; disable before starting
          recentf-mode 1)
    (recentf-mode t))

#+END_SRC

** shen

#+BEGIN_SRC emacs-lisp
  (require 'shen-mode nil :noerror)
  (require 'inf-shen nil :noerror)
#+END_SRC

** sh-mode

Disable tabs.

#+BEGIN_SRC emacs-lisp
  (add-hook 'sh-mode-hook (lambda ()
							(setq indent-tabs-mode nil)))
#+END_SRC

Enable flycheck

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'flycheck)
    (add-hook 'perl-mode-hook 'flycheck-mode))

#+END_SRC

** Term Mode

Disable /yasnippet/ in Term mode.

#+BEGIN_SRC emacs-lisp
  (add-hook 'term-mode-hook (lambda ()
                              (yas-minor-mode -1)))
#+END_SRC

** text-mode

Automatically enable auto fill mode.

#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'turn-on-auto-fill)
#+END_SRC

** twittering-mode

Configuration for [[http://www.emacswiki.org/emacs/TwitteringMode][twittering-mode.]]  Basic usage:

- ~M-x twit~ to run =twittering-mode= and put you in view mode
- move cursor on current timeline
  - ~j~ goto next tweet
  - ~k~ goto previous tweet
  - ~n~ goto next tweet whose author is same as current tweet
  - ~p~ goto previous tweet whose author is same as current tweet
  - ~l~ goto next character
  - ~h~ goto previous character
  - ~0~ goto beginning of line
  - ~^~ goto beginning of text on current line
  - ~$~ goto end of line
  - ~C-i~ goto next username, URI, or timeline symbol
  - ~M-C-i~ goto previous username, URI, or timeline symbol
  - ~<backspace>~ or ~M-v~ scroll down
  - ~<space>~ or ~C-v~ scroll up
  - ~H~ goto beginning of current buffer
  - ~G~ goto end of current buffer
- apply some operation to curent timeline
  - ~g~ retrieve new tweets of current timeline
  - ~r~ display replied tweets related to current tweet
  - ~C-C D~ delete the current tweet (if it is yours)
  - ~q~ kill current timeline buffer
- open another timeline
  - ~v~ open timelime at point
  - ~V~ open a various timeline by spec:
    - ~:home~
    - ~:mentions~
    - ~:public~
    - user
    - user/listname
    - ~:direct_messages~
    - ~:direct_messages_sent~
    - ~:favorites~
    - ~:favorites/~ user
    - #hashtag
    - ~:retweeted_by_me~
    - ~:retweeted_by_user/~ user
    - ~:retweeted_to_me~
    - ~:retweeted_to_user/~ user
    - ~:retweets_of_me~
    - ~:search/~ query-string ~/~  (inside query-string must escape
      slash and back-slash)
  - ~f~ switch to next timeline buffer
  - ~b~ switch to previous timeline buffer
- post a tweet
  - ~u~ or ~C-c C-s~ post a tweet
  - ~C-m~ post a reply to tweet at point
  - ~C-c C-m~ or ~C-c ENTER~ post non-official (organic) retweet of
    tweet at point
  - ~C-u C-c C-m~ or ~C-u C-c ENTER~ post official (native) retweet of
    tweet at point
  - ~d~ send a direct message
- invoke external browser
  - ~C-c C-v~ open user's page at point
- change display mode
  - ~a~ toggle automatic retrieval of current timeline
  - ~i~ toggle displaying icons of curent timeline
  - ~s~ toggle scroll mode for current timeline
  - ~t~ toggle proxy
- others
  - ~C-c C-t~ set current hashtag
  - ~C-c C-l~ post the message "Lambda is cute, lambda"
  - ~U~ push URL of current tweet to kill-ring
- key-bindings on edit mode
  - ~M-p~ replace tweet being edited with previous tweet on history
  - ~M-n~ replace tweet being edited with next tweet on history
  - ~<F4>~ shorten URL at point
  - ~C-c C-k~ cancel tweet being edited
  - ~C-c C-c~ post current tweet

#+BEGIN_SRC emacs-lisp
  (if (and
       (require 'twittering-mode nil :noerror)
       (shell-command "which gpg"))
      (setq got/twittering-mode-available t)
    (do
        (warn "not configuring twittering mode - need gnupg installed")
        (setq got/twittering-mode-available nil)))

#+END_SRC

*** Use master password

#+BEGIN_SRC emacs-lisp
  (when got/twittering-mode-available
    (setq twittering-use-master-password t))
#+END_SRC

*** Establish initial timelines that are loaded

#+BEGIN_SRC emacs-lisp
  (when got/twittering-mode-available
    (setq twittering-initial-timeline-spec-string
          '(":home"
            ":direct_messages")))
#+END_SRC

*** Use bitly for URL-shortening

#+BEGIN_SRC emacs-lisp
  (when got/twittering-mode-available
    (setq twittering-tinyurl-service 'bit.ly))
#+END_SRC

** undo-tree-mode
Undo-tree-mode replaces Emacs' standard undo feature with a more
powerful yet easier to use version, that treats the undo history
as what it is: a tree.

Enable global undo tree mode if the package is available.  Trigger
visualiztion via ~C-x u~.  Exit by hitting "q" with desired node
active.

#+BEGIN_SRC emacs-lisp
  (when (require 'undo-tree nil 'noerror)
    (global-undo-tree-mode))
#+END_SRC

Hide undo-tree minor mode in the modeline:

#+BEGIN_SRC emacs-lisp
  (eval-after-load "undo-tree" '(diminish 'undo-tree-mode))
#+END_SRC

** whitespace-mode

Configure whitespace visualization.  Here is a breakdown of the
settings that I use.

These are the ~whitespace-style~ options.

| Option           | Description                                                                        |
|------------------+------------------------------------------------------------------------------------|
| face             | enable all visualization via faces                                                 |
| trailing         | trailing blanks are visualized via faces, if ~face~ present in ~whitespace-style~  |
| lines-tail       | lines which have columns beyond ~whitespace-line-column~ are highlighted via faces |
| space-before-tab | SPACEs before TAB visulized if ~indent-tabs-mode~ is non nil                       |
| indentation      | 8 or more SPACESs at beginning of line visualized if ~indent-tabs-mode~ non nil    |
| space-after-tab  | 8 or more SPACEs after TAB visualized if ~indent-tabs-mode~ is non nil             |

The ~whitespace-line-column~ setting specifies the column beyond which
the line is highlighted.  It is used only when ~whitespace-style~
includes ~lines~ or ~lines-tail~.  I have it set for 80 columns.

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'whitespace)
    (setq whitespace-style '(
                             face
                             trailing
                             lines-tail
                             space-before-tab
                             indentation
                             space-after-tab
                             ))
    (setq whitespace-line-column 80))

#+END_SRC
** yasnippet-mode

Enable yasnippet everywhere by default.

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'yasnippet)
    (yas-global-mode))
#+END_SRC

Hide yas minor mode in the mode line.

#+BEGIN_SRC emacs-lisp
  (eval-after-load "yasnippet" '(diminish 'yas-minor-mode))
#+END_SRC
